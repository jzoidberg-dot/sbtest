#!groovy
// docker build
properties([disableConcurrentBuilds()])

pipeline {
    agent { 
        label 'ja1'
        }
    triggers { pollSCM('* * * * *') }
	options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage("docker login") {
			steps{
				withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
					sh """
					docker login -u $USERNAME -p $PASSWORD
					"""
				}
			}
		}
		stage("create docker image") {
            steps {
                echo " ========== start building ========== "
				dir ('docker/docker-flask') {
					sh 'docker build -t zoid/sbtest:flask-auto .'
				}
            }
        }
		stage("Run and test image") {
            steps {
                echo " ========== running and testing ========== "
				sh '''
				docker run --rm --network host -d --name flask-auto zoid/sbtest:flask-auto
				docker exec flask-auto /test.sh
				docker exec flask-auto /test.sh | grep '[100%]'
                if  [ '$(?)' != '0' ]; then echo "webapp tests failed" && docker stop flask-auto && exit 1; fi
                docker stop flask-auto
				'''
				}
            }
		stage("docker push") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    echo " ========== pushing image ========== "
                    sh """
                    docker login -u $USERNAME -p $PASSWORD
                    docker push zoid/sbtest:flask-auto
                    """
                }
			}
        }
    }       
}
