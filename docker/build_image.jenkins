#!groovy
// docker build
properties([disableConcurrentBuilds()])

pipeline {
    agent { 
        label 'ja1'
        }
    triggers { pollSCM('* * * * *') }
	options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        
		stage("create docker image") {
            steps {
                echo " ========== start building ========== "
				dir ('docker/docker-flask') {
					sh 'docker build -t zoid/sbtest:flask .'
				}
            }
        }
		
        stage("Run and test image") {
            steps {
                echo " ========== running and testing ========== "
				sh '''
				
                docker run --rm --network host -d --name flask zoid/sbtest:flask
				docker exec flask /test.sh | grep "[100%]"
                if  [ "${?}" != "0" ]; then echo "webapp tests failed" && docker stop flask && exit 1; fi
                docker stop flask
				'''
				}
            }
		
        stage("docker push") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    echo " ========== pushing image ========== "
                    sh """
                    docker login -u $USERNAME -p $PASSWORD
                    docker push zoid/sbtest:flask
                    """
                }
			}
        }
    }       
}
